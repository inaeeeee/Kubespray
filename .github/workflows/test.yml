name: Deploy lb-web on External K8s Server (Local with SSH)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Install PostgreSQL Client on CentOS
        run: |
          echo "üîß Checking if PostgreSQL Client (psql) is installed..."
          if ! command -v psql &> /dev/null
          then
            echo "‚ö†Ô∏è PostgreSQL Client not found. Installing..."
            sudo yum install -y postgresql
          else
            echo "‚úÖ PostgreSQL Client is already installed."
          fi

      - name: Setup PostgreSQL Authentication (Avoid Password Prompts)
        run: |
          echo "üîß Configuring PostgreSQL authentication..."
          echo "192.168.60.67:5001:*:postgres:qaz123" > ~/.pgpass  # Slave (SELECT)
          echo "192.168.60.67:5000:*:postgres:qaz123" >> ~/.pgpass  # Master (INSERT, UPDATE)
          chmod 600 ~/.pgpass

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch lb-web Deployment Info from PostgreSQL via HAProxy (Slave)
        run: |
          echo "üîç Fetching lb-web deployment information from PostgreSQL via HAProxy (Slave)..."

          SERVICE_INFO=$(psql -h 192.168.60.67 -p 5001 -U postgres -d solmakasedb -t -w -c \
            "SELECT name, deploy_script FROM servicetemplate WHERE name = 'lb-web';")

          if [[ -z "$SERVICE_INFO" ]]; then
            echo "‚ùå No deployment information found for lb-web!"
            exit 1
          fi

          echo "‚úÖ Found lb-web service info: $SERVICE_INFO"

          DEPLOY_SCRIPT=$(echo "$SERVICE_INFO" | awk -F '|' '{print $2}' | xargs)

          echo "üìå Deploy Script Path: $DEPLOY_SCRIPT"

      - name: Fix Permissions on Kubernetes Master Server
        run: |
          echo "üîß Ensuring correct permissions for /tmp/lb-web on Kubernetes master server..."
          ssh -o StrictHostKeyChecking=no devops@192.168.30.32 "sudo mkdir -p /tmp/lb-web && sudo chown -R devops:devops /tmp/lb-web"

      - name: Copy Deployment Files to Kubernetes Master Server
        run: |
          echo "üöÄ Copying deployment script and YAML to Kubernetes master server (192.168.30.32)..."
          scp -o StrictHostKeyChecking=no /tmp/lb-web/deploy.sh devops@192.168.30.32:/tmp/lb-web/deploy.sh
          scp -o StrictHostKeyChecking=no /tmp/lb-web/deployment.yaml devops@192.168.30.32:/tmp/lb-web/deployment.yaml

      - name: Execute Deploy Script on Kubernetes Master Server
        run: |
          echo "üöÄ Executing deployment script on Kubernetes master server (192.168.30.32)..."
          ssh -o StrictHostKeyChecking=no devops@192.168.30.32 "chmod +x /tmp/lb-web/deploy.sh && /tmp/lb-web/deploy.sh"

      - name: Store VM Information in PostgreSQL (Master)
        run: |
          echo "üóÑ Fetching VM Information from Kubernetes Master and Storing in PostgreSQL..."

          # Kubernetes MasterÏóêÏÑú Ïã§ÌñâÌïòÏó¨ VM Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Í∏∞
          POD_INFO=$(ssh -o StrictHostKeyChecking=no devops@192.168.30.32 \
            "kubectl get pods -o jsonpath='{range .items[*]}{.metadata.name}{\"|\"}{.status.podIP}{\"\n\"}{end}'" | tr -d '\r')

          if [[ -z "$POD_INFO" ]]; then
              echo "‚ùå ERROR: No running pods found!"
              exit 1
          fi

          echo "‚úÖ VM Information Retrieved: $POD_INFO"

          # PostgreSQL Master(5000)Ïóê VM Ï†ïÎ≥¥ Ï†ÄÏû•
          while IFS="|" read -r HOSTNAME IP_ADDRESS; do
              if [[ -n "$HOSTNAME" && -n "$IP_ADDRESS" ]]; then
                  echo "üìå Storing VM: $HOSTNAME ($IP_ADDRESS) in PostgreSQL"

                  psql -h 192.168.60.67 -p 5000 -U postgres -d solmakasedb -c \
                  "INSERT INTO VM (workspace_id, hostname, ip_address, status)
                   VALUES (1, '$HOSTNAME', '$IP_ADDRESS', 'running')
                   ON CONFLICT (hostname) 
                   DO UPDATE SET ip_address = EXCLUDED.ip_address, status = 'running';"
              fi
          done <<< "$POD_INFO"

          echo "‚úÖ VM Information Successfully Stored in PostgreSQL"
